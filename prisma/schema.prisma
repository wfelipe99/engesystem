generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UF {
  AC
  AL
  AP
  AM
  BA
  CE
  DF
  ES
  GO
  MA
  MT
  MS
  MG
  PA
  PB
  PR
  PE
  PI
  RJ
  RN
  RS
  RO
  RR
  SC
  SP
  SE
  TO
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// In the code it can be refered as Workder or Employee too
// I need to use "User" in model's name because of the Adapter from next-auth
model User {
  id                     String           @id @default(cuid())
  name                   String
  email                  String           @unique
  emailVerified          DateTime?
  image                  String?
  CPF                    String
  admissionDate          DateTime         @db.Timestamptz()
  bank                   String?
  agency                 String?
  account                String?
  operation              String?
  pixKey                 String?
  productionSalary       Decimal?         @db.Decimal(10, 2)
  TransportVouch         Decimal          @default(0) @db.Decimal(10, 2)
  accounts               Account[]
  sessions               Session[]
  roles                  Role[]
  receivedVariableValue  VariableValue[]
  receivedMoneyInAdvance MoneyInAdvance[]
  overTimeWork           OverTimeWork[]
  discounts              Discount[]
  constructions          Construction[]

  @@unique([name, CPF])
}

model Role {
  id        String  @id @default(cuid())
  name      String
  UF        UF
  salary    Decimal @db.Decimal(10, 2)
  // WARNING: Any modification to this values, change it on TypeScript side too,
  // which is in utils/utils.ts
  // Hierarchy:
  // 0: Incapaz de acessar o sistema
  // 1: Apontador
  // 2: Administrativo
  // 3: CEO
  hierarchy Int     @default(0)
  employees User[]

  @@unique([name, UF])
}

model Construction {
  id         String    @id @default(cuid())
  overTimeId String?
  name       String
  UF         UF
  employees  User[]
  overTime   OverTime? @relation(fields: [overTimeId], references: [id])

  @@unique([name, UF])
}

model Discount {
  id              String  @id @default(cuid())
  name            String  @unique
  percentOnSalary Decimal @db.Decimal(10, 2)
  user            User[]
}

model VariableValue {
  id       String   @id @default(cuid())
  userId   String
  paidAt   DateTime
  bonus    Decimal  @db.Decimal(10, 2)
  employee User     @relation(fields: [userId], references: [id])
}

model MoneyInAdvance {
  id          String   @id @default(cuid())
  userId      String
  paidAt      DateTime
  value       Decimal  @db.Decimal(10, 2)
  description String
  employee    User     @relation(fields: [userId], references: [id])
}

model OverTime {
  id                  String         @id @default(cuid())
  percentOnWorkedHour Decimal        @db.Decimal(10, 2)
  constructions       Construction[]
  overTimeWork        OverTimeWork[]
}

model OverTimeWork {
  id           String   @id @default(cuid())
  userId       String
  overTimeId   String
  paidAt       DateTime
  hours        Int
  overTimeInfo OverTime @relation(fields: [overTimeId], references: [id])
  employee     User     @relation(fields: [userId], references: [id])
}
